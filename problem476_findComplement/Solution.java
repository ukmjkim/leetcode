import java.util.*;

public class Solution {
  // The result can be generated by the number XOR with a same-length all 1 bits mask.
  public int findComplement(int num) {
    
    // 1. Integer.highestOneBit(num), return the integer value which has only one bit in the position of the very left
    // 2. (Integer.highestOneBit(num) << 1) - 1 to get the num has one for each bit.

    int mask = (Integer.highestOneBit(num) << 1) - 1;
    return mask ^ num;
  }
  
  // The result can be generated by the number XOR with a same-length all 1 bits mask.
  public int findComplement2(int num) {
    if (num == Integer.MAX_VALUE) {
      return 0;
    }
    int mask = 1;
    while (mask < num) {
      mask = (mask << 1) + 1;
    }
    return mask ^ num;
  }

  public static void main(String[] args) {
    Solution solution = new Solution();

    int num = 5;
    System.out.printf("findComplement(%d): %d, %d\n\n", num, solution.findComplement(num), solution.findComplement2(num));
  }
}



